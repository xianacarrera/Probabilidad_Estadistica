for (i in 52:101){
v[i] <- mifuncion2(i-1)*100/10000
}
print(v)
xi <- 0:100
plot(xi, v, xaxt="n", yaxt="n", type="n", xlim=c(0,100), ylim=c(0,100), main="2RN vs 1RN", xlab="Displayed Hit", ylab="True Hit")
lines(xi, v, xlim=c(0,100), ylim=c(0,100), col="blue", lwd="2")
axis(side = 1, at = seq(0,100,10), labels = seq(0,100,10))
axis(side = 2, at = seq(0,100,10), labels = seq(0,100,10))
# Función que calcula True Hit para un Displayed Hit en el rango [0, 50)
mifuncion <- function(n){
return(2*n^2 + n)
}
# Función que calcula True Hit para un Displayed Hit en el rango [50, 100]
mifuncion2 <- function(n){
tot = mifuncion(n)
tot = tot - (2*n-100)*(2*n-99)        # Se restan los casos no válidos
return(tot)
}
v <- numeric(101)         # Array con las probabilidades correspondientes a cada valor de n en [51, 100]
for (i in 1:51){
v[i] <- mifuncion(i-1)*100/10000
}
for (i in 52:101){
v[i] <- mifuncion2(i-1)*100/10000
}
print(v)
plot(xi, v, xaxt="n", yaxt="n", type="n", xlim=c(0,100), ylim=c(0,100), main="2RN vs 1RN", xlab="Displayed Hit", ylab="True Hit")
lines(xi, v, xlim=c(0,100), ylim=c(0,100), col="blue", lwd="2")
axis(side = 1, at = seq(0,100,10), labels = seq(0,100,10))
axis(side = 2, at = seq(0,100,10), labels = seq(0,100,10))
eq = function(x){x}
curve(eq, from=0, to=100, add=TRUE, col="orange", lwd="2")
abline(h=seq(0,100,10), v=seq(0,100,10), col="gray", lty=3)
legend("bottomright", c("2RN", "1RN"), text.col=c("blue", "orange"), lwd=2, col=c("blue", "orange"))
# Representación de la gráfica correspondiente a 2RN
plot(xi, v, xaxt="n", yaxt="n", type="n", xlim=c(0,100), ylim=c(0,100), main="2RN vs 1RN", xlab="Displayed Hit", ylab="True Hit")
lines(xi, v, xlim=c(0,100), ylim=c(0,100), col="blue", lwd="2")
axis(side = 1, at = seq(0,100,10), labels = seq(0,100,10))
axis(side = 2, at = seq(0,100,10), labels = seq(0,100,10))
# Representación de la función f(x) = x (1RN)
eq = function(x){x}
curve(eq, from=0, to=100, add=TRUE, col="orange", lwd="2")
# Leyenda
legend("bottomright", c("2RN", "1RN"), text.col=c("blue", "orange"), lwd=2, col=c("blue", "orange"))
# Líneas punteadas
abline(h=seq(0,100,10), v=seq(0,100,10), col="gray", lty=3)
# Representación de la gráfica correspondiente a 2RN
plot(xi, v, xaxt="n", yaxt="n", type="n", xlim=c(0,100), ylim=c(0,100), main="2RN vs 1RN", xlab="Displayed Hit", ylab="True Hit")
lines(xi, v, xlim=c(0,100), ylim=c(0,100), col="blue", lwd="2")
axis(side = 1, at = seq(0,100,10), labels = seq(0,100,10))
axis(side = 2, at = seq(0,100,10), labels = seq(0,100,10))
# Representación de la función f(x) = x (1RN)
eq = function(x){x}
curve(eq, from=0, to=100, add=TRUE, col="green", lwd="2")
# Gridline punteada
abline(h=seq(0,100,10), v=seq(0,100,10), col="gray", lty=3)
# Leyenda
legend("bottomright", c("2RN", "1RN"), text.col=c("blue", "green"), lwd=2, col=c("blue", "green"))
# Representación de la gráfica correspondiente a 2RN
plot(xi, v, xaxt="n", yaxt="n", type="n", xlim=c(0,100), ylim=c(0,100), main="2RN vs 1RN", xlab="Displayed Hit", ylab="True Hit")
lines(xi, v, xlim=c(0,100), ylim=c(0,100), col="green", lwd="2")
axis(side = 1, at = seq(0,100,10), labels = seq(0,100,10))
axis(side = 2, at = seq(0,100,10), labels = seq(0,100,10))
# Representación de la función f(x) = x (1RN)
eq = function(x){x}
curve(eq, from=0, to=100, add=TRUE, col="blue", lwd="2")
# Gridline punteada
abline(h=seq(0,100,10), v=seq(0,100,10), col="gray", lty=3)
# Leyenda
legend("bottomright", c("2RN", "1RN"), text.col=c("green", "blue"), lwd=2, col=c("green", "blue"))
# Representación de la gráfica correspondiente a 2RN
plot(xi, v, xaxt="n", yaxt="n", type="n", xlim=c(0,100), ylim=c(0,100), main="2RN vs 1RN", xlab="Displayed Hit", ylab="True Hit")
lines(xi, v, xlim=c(0,100), ylim=c(0,100), col="blue", lwd="2")
axis(side = 1, at = seq(0,100,10), labels = seq(0,100,10))
axis(side = 2, at = seq(0,100,10), labels = seq(0,100,10))
# Representación de la función f(x) = x (1RN)
eq = function(x){x}
curve(eq, from=0, to=100, add=TRUE, col="green", lwd="2")
# Gridline punteada
abline(h=seq(0,100,10), v=seq(0,100,10), col="gray", lty=3)
# Leyenda
legend("bottomright", c("2RN", "1RN"), text.col=c("blue", "green"), lwd=2, col=c("blue", "green"))
library(MASS)
head(geyser)
tespera <- geyser$waiting
summary(tespera)
par(mfrow=c(1,2))
hist(tespera)
rug(tespera)
boxplot(tespera)
par(mfrow=c(1,1))
xs <- seq(40, 110, length=500)  # Tomo 500 valores entre el mínimo y el máximo aproximados
ys <- dnorm(xs, mean=mean(tespera), sd=sd(tespera))  # Aproximo una normal con esos puntos
windows()
hist(tespera, freq=F)     # Frecuencias relativas (necesarias para pintar densidades)
xs <- seq(40, 110, length=500)  # Tomo 500 valores entre el mínimo y el máximo aproximados
ys <- dnorm(xs, mean=mean(tespera), sd=sd(tespera))  # Aproximo una normal con esos puntos
# Dibujo una línea con esa función de densidad
lines(ys~xs, lwd=2)
windows()
par(mfrow=c(3,2))
hist(tespera,main="",ylab="",xlab="Tiempo espera (min)",freq=F)
hist(tespera,breaks=4,main="",ylab="", xlab="Tiempo espera (min)",freq=F)
hist(tespera,breaks=100,main="",ylab="", xlab="Tiempo espera (min)",freq=F)
hist(duration,breaks=c(40,60,80,100,110),main="", ylab="",xlab="Tiempo espera (min)",freq=F)
hist(duration,breaks=seq(35,120,by=20),main="", ylab="",xlab="Tiempo espera (min)",freq=F)
windows()
par(mfrow=c(3,2))
hist(tespera,main="",ylab="",xlab="Tiempo espera (min)",freq=F)
# Con 4 intervalos:
hist(tespera,breaks=4,main="",ylab="", xlab="Tiempo espera (min)",freq=F)
# Con 100 intervalos:
hist(tespera,breaks=100,main="",ylab="", xlab="Tiempo espera (min)",freq=F)
hist(tespera, breaks=c(40,60,80,100,110),main="", ylab="",xlab="Tiempo espera (min)",freq=F)
hist(tespera,breaks=seq(35,120,by=20),main="", ylab="",xlab="Tiempo espera (min)",freq=F)
# Marcando los intervalos con una secuencia
hist(tespera,breaks=seq(35,120,by=10),main="", ylab="",xlab="Tiempo espera (min)",freq=F)
# Marcando los intervalos con una secuencia
hist(tespera,breaks=seq(35,120,length=20),main="", ylab="",xlab="Tiempo espera (min)",freq=F)
windows()
hist(tespera, freq=F)
density(tespera, kernel="rectangular")
windows()
hist(tespera, freq=F)
lines(density(tespera, kernel="rectangular"))
?density
ws()
hist(tespera, freq=F)
lines(density(tespera, bw=1, kernel="rectangular"))   # kernel es la suavización
s()
hist(tespera, freq=F)
lines(density(tespera, bw=20, kernel="rectangular"))
indows()
hist(tespera, freq=F)
lines(density(tespera, bw=20, kernel="rectangular"))
windows()
hist(tespera, freq=F)
lines(density(tespera, bw=20, kernel="rectangular"))
windows()
plot(density(tespera))
plot(density(tespera))
rug(tespera)
lines(density(tespera, bw=20))
lines(density(tespera, bw=20, col=blue))
lines(density(tespera, bw=20, col="blue"))
lines(density(tespera, bw=20), col="blue"))
lines(density(tespera, bw=20), col="blue")
lines(density(tespera, bw=1), col="red")
lines(density(tespera, bw=20), col="red")
lines(density(tespera, bw=1), col="blue")
# Si aumento mucho el ancho, aproximo una normal
lines(density(tespera, bw=20), col="red", lwd=2)
# Con un ancho muy pequeño, tengo mucha oscilación
lines(density(tespera, bw=1), col="blue", lwd=2)
plot(density(tespera), lwd=2)
# Si aumento mucho el ancho, aproximo una normal
lines(density(tespera, bw=20), col="red", lwd=2)
# Con un ancho muy pequeño, tengo mucha oscilación
lines(density(tespera, bw=1), col="blue", lwd=2)
install.packages("multimode")
# install.packages("multimode")
library(multimode)
sizer(tespera)
lines(density(tespera,kernel="rectangular"),col=2)     # Histograma móvil o estimador naive
lines(density(tespera,kernel="epanechnikov"),col=2)
lines(density(tespera,kernel="triangular"),col=3)
lines(density(tespera,kernel="biweight"),col=4)
legend("topleft",legen=c("Gausiano","Epa","Triangular","Biweight"),col=1:4,lwd=2,bty="n")
plot(density(tespera))
lines(density(tespera,kernel="rectangular"),col=2)     # Histograma móvil o estimador naïve
lines(density(tespera,kernel="epanechnikov"),col=2)
lines(density(tespera,kernel="triangular"),col=3)
lines(density(tespera,kernel="biweight"),col=4)
legend("topleft",legen=c("Gausiano","Epa","Triangular","Biweight"),col=1:4,lwd=2,bty="n")
windows()
plot(density(tespera))
lines(density(tespera,kernel="rectangular"),col=2)     # Histograma móvil o estimador naïve
lines(density(tespera,kernel="epanechnikov"),col=2)
lines(density(tespera,kernel="triangular"),col=3)
lines(density(tespera,kernel="biweight"),col=4)
legend("topleft",legen=c("Gausiano","Epa","Triangular","Biweight"),col=1:4,lwd=2,bty="n")
plot(density(tespera))
lines(density(tespera,kernel="rectangular"),col=2)     # Histograma móvil o estimador naïve
lines(density(tespera,kernel="epanechnikov"),col=3)
lines(density(tespera,kernel="triangular"),col=4)
lines(density(tespera,kernel="biweight"),col=5)
legend("topleft",legen=c("Gausiano", "Rectangular", "Epa","Triangular","Biweight"),col=1:5,lwd=2,bty="n")
?density
bw.nrd0(tespera)
bw.nrd(tespera)
bw.ncv(tespera)
bw.ucv(tespera)
bw.sj(tespera)
bw.SJ(tespera)
windows()
plot(density(tespera))        # Regla del pulgar o de Silverman
lines(density(tespera), bw="sj", col=2)     # Plugin o Silver-Jones
lines(density(tespera), bw="ucv", col=3)    # Validación cruzada
legend("topleft",legen=c("Regla del pulgar", "Plugin", "Silverman"),col=1:3,lwd=2,bty="n")
windows()
plot(density(tespera))        # Regla del pulgar o de Silverman
lines(density(tespera, bw="sj"), col=2)     # Plugin o Silver-Jones
lines(density(tespera, bw="ucv"), col=3)    # Validación cruzada
legend("topleft",legen=c("Regla del pulgar", "Plugin", "Silverman"),col=1:3,lwd=2,bty="n")
legend("topleft",legen=c("Regla del pulgar", "Plugin", "Validación cruzada"),col=1:3,lwd=2,bty="n")
plot(density(tespera))        # Regla del pulgar o de Silverman
lines(density(tespera, bw="sj"), col=2)     # Plugin o Silver-Jones
lines(density(tespera, bw="ucv"), col=3)    # Validación cruzada
legend("topleft",legen=c("Regla del pulgar", "Plugin", "Validación cruzada"),col=1:3,lwd=2,bty="n")
install.packages("sm")
#install.packages("sm")
library(sm)
sm.density(geyser, display = "image")
sm.density(geyser, display = "persp")
windows()
sm.density(geyser, display = "persp")
install.packages("rgl")
library(rgl)
View(density(geyser))
View(sm.density(geyser, display="persp"))
persp3d(geyser,col="red")
persp3d(sm.density(geyser),col="red")
persp3d(geyser,col="red")
str(geyser)
library(rgl)
attach(geyser)
View(geyser)
with(geyser,plot3d(waiting, duration)
)
install.packages("rpanel")
library(rpanel)
sm.density(geyser, panel=T)
rp.cartoons()
sm.density(geyser, panel=T)
# Representación en 2 perspectivas
library(sm)
# sm.density -> smooth density
sm.density(geyser)
sm.density(geyser, display="image")
sm.density(geyser, display="persp")
# Representación interactiva
# install.packages("rgl")
# install.packages("rpanel")
# install.packages("tkrplot")
library(rgl)
library(rpanel)
library(tkrplot)
sm.density(geyser, panel=T)
sm.density(geyser, panel=T)
library(LearningStats)
install.packages("LearningStats")
library(LearningStats)
data(sicri2018)
head(sicri2018)
summary(sicri2018)
str(sicri2018)
?sicri2018
attach(sicri2018)
par(mfrow=c(1,2))
windows()
par(mfrow=c(1,2))
hist(age)
boxplot(age)
ks.test(age, pnorm)
table(smoke)
prop.table(table(age,smoke))
round(prop.table(table(age,smoke)), 2)
age.f <- age[smoke==1]
age.f <- age[smoke==1]
age.nf <- age[smoke==0]
age.f
summary(age.f)
summary(age.nf)
hist(age.f)
hist(age.nf)
plot(density(age.f))
lines(density(age.nf), cor=2)
lines(density(age.nf), col=2)
plot(density(age.f))
lines(density(age.nf), col=2)
?legend
legend("topright", c("Fumadores", "No fumadores"), col = c("blue", "red"))
plot(density(age.f), col="blue", ylim=c(0,0.03))
lines(density(age.nf), col="red")
legend("topright", c("Fumadores", "No fumadores"), col = c("blue", "red"), lwd=2, bty="n")
par(mfrow=c(1,1))
plot(density(age.f), col="blue", ylim=c(0,0.03))
lines(density(age.nf), col="red")
legend("topright", c("Fumadores", "No fumadores"), col = c("blue", "red"), lwd=2, bty="n")
ks.test(age.f, age.nf)
sm.density.compare(age.f, age.nf)
sm.density.compare(age, smoke)
sm.density.compare(age, smoke, mode="equal")
plot(density(age.f), col="blue", ylim=c(0,0.03))
ks.test(age, smoke, mean=mean(age), sd=sd(age))
library(nortest)
install.packages("nortest")
# install.packages("nortest")
library(nortest)
lillie.test(age)
plot(density(BMI))
plot(density(bmi))
lillie.test(bmi)
sm.density(bmi)
sm.density(bmi, model="normal")
bmi.M <- bmi[sex==1]
bmi.F <- bmi[sex==2]
lillie.test(bmi.M)
lillie.test(bmi.F)
# Ninguno de los grupos es normal. No debería hacer un test-t
t.test(bmi.M, bmi.F)
ks.test(bmi.M, bmi.F)
sm.density.compare(bmi.M, bmi.F, model = "equal")
sm.density.compare(bmi, sex, model = "equal")
str(sicri2018)
?`LearningStats
fdsj
)
`
?sicri2018
plot(density(netuse))
netuse.new <- netuse[!is.na(netuse)]
plot(density(netuse.new))
lillie.test(netuse)
sm.density.compare(weight, prov, model="equal")
# Con más de 2 grupos no se crea una banda de referencia
sm.density.compare(weight, prov, model="equal")
# Con más de 2 grupos no se crea una banda de referencia
sm.density.compare(weight, prov, model="equal")
# Con más de 2 grupos no se crea una banda de referencia
sm.density.compare(weight, prov, model="equal")
# Con más de 2 grupos no se crea una banda de referencia
sm.density.compare(weight, prov, model="equal")
sm.density.compare(age, prov, model="equal")
sm.density.compare(age, prov, model="equal")
kruskal.test(weight, prov)
x=rbind(c(12,24,31,16),c(20,18,30,14))
chisq.test(x)
chi <- chisq.test(smoke, cann); chi
chi$expected
table(smoke, cann)
fi=fisher.test(x,y);fi
fi=fisher.test(smoke, cann);fi
plot(weight, height)
cor(weight, height)
cor(weight, height, method="spearman")
cor(weight, height, method="kendall")
cor.test(weight, height, method="spearman")
# Tests de correlación
cor.test(weight, height)
cor.test(weight, height, method="kendall")
cor.test(weight, height, method="spearman")
cor.test(weight, height, method="spearman")
# Tests de correlación
cor.test(weight, height)
cor.test(weight, height, method="kendall")
dat <- mtcars; head(dat, 6)
# Eliminamos duplicados
# Nota: aquí estamos borrando tanto los duplicados como el propio dato (habría que dejar uno de ellos)
idxwt=which(duplicated(dat$wt))
dat <- mtcars; head(dat, 6)
# Eliminamos duplicados
# Nota: aquí estamos borrando tanto los duplicados como el propio dato (habría que dejar uno de ellos)
idxwt=which(duplicated(dat$wt))
idxmpg=which(duplicated(dat$mpg))
idx=union(idxwt,idxmpg)
millas <- dat$mpg[-idx]
pesos <- dat$wt[-idx]
plot(millas, pesos, pch=16)
shapiro.test(millas)
shapiro.test(pesos)
cor.test(millas, pesos,method = "pearson")
cor.test(millas, pesos,method = "spearman")
cor.test(millas, pesos,method = "kendall")
cor.test(millas, pesos,method = "pearson")
# Hago 4 grupos
millas <- cut(millas, breaks=4)
pesos <- cut(pesos, breaks=4)
table(millas, pesos)
table(pesos, millas)
# Podríamos incluso hacer un test chi-cuadrado
chisq.test(pesos, millas)
shapiro.test(millas)
shapiro.test(pesos)
# Hago 4 grupos de cada
millas <- cut(millas, breaks=4)
pesos <- cut(pesos, breaks=4)
millas <- dat$mpg[-idx]
pesos <- dat$wt[-idx]
shapiro.test(millas)
shapiro.test(pesos)
cor.test(millas, pesos,method = "pearson")
cor.test(millas, pesos,method = "spearman")
cor.test(millas, pesos,method = "kendall")
cov(millas, pesos)
N <- 10000
a <- runif(N, min=0, max=3)
b <- runif(N, min=-1, max=1)
sum(a^2>4b)/N
sum(a^2>4*b)/N
2/9
7*9
7/9
13/18
N <- 10000000
sum(a^2>4*b)/N
2/9
7/9
a^2>=4*b
sum(a^2>=4*b)
N <- 10000000
a <- runif(N, min=0, max=3)
b <- runif(N, min=-1, max=1)
sum(a^2>=4*b)/N
7/9
setwd("C:/Users/Xiana/Desktop/Probabilidad y Estadística/R/Practica_2")
datos = read.table("familias.txt", header=T, sep=" ", dec=".")
head(datos)
# El vector de medias tendrá 4 componentes, una por cada variable (las columnas)
# Utilizamos la función apply a modo de sustituto de un bucle
# 1 -> filas, 2 -> columnas, 3 -> profundidad (si tuviéramos 3 dim)
apply(datos, 2, mean)
# Otra opción -> utilizar la función colMeans
colMeans(datos)
?cov
cov(datos)
cov(datos[,1:2], datos[,3:4])   # También vale cov(datos[,c(1,2)],datos[,c(3,4)])
cov2cor(datos)
cov2cor(cov(atos))
cov2cor(cov(datos))
cor(datos)
round(cor(datos), 3)
cov2cor(cov(atos))
?cov2cor
?var
?sd
# Obtengo las desviaciones típicas
# IMP -> R calcula la cuasivarianza y cuasidesviación típica (divide por n-1 en lugar de n)
n <- dim(datos[1,])
# Obtengo las desviaciones típicas
# IMP -> R calcula la cuasivarianza y cuasidesviación típica (divide por n-1 en lugar de n)
n <- dim(datos)[1]
apply(datos, 2, sd) * sqrt((n-1)/n)
v <- apply(datos, 2, sd) * sqrt((n-1)/n)
diag(1/v)%*%cov(datos)%*%diag(1/v)
?apply
# Tenemos que corregir también cov(datos) para que en la diagonal tenga las varianzas y no las
# cuasivarianzas.
datos2 = datos
diag(datos2) <- v*v
datos2
# Tenemos que corregir también cov(datos) para que en la diagonal tenga las varianzas y no las
# cuasivarianzas.
datos2 = cov(datos)
diag(datos2) <- v*v
datos2
diag(1/v)%*%cov(datos2)%*%diag(1/v)
v = apply(datos, 2, sd) * sqrt((n-1)/n)
v = apply(datos, 2, sd) * sqrt((n-1)/n); v
datos2
diag(datos2) <- apply(datos, 2, var) * sqrt((n-1)/n
diag(1/v)%*%cov(datos2)%*%diag(1/v)
diag(datos2) <- apply(datos, 2, var) * sqrt((n-1)/n)
datos2
diag(datos2) <- apply(datos, 2, var) * sqrt((n-1)/n); datos2
diag(1/v)%*%cov(datos2)%*%diag(1/v)
cov(datos)
diag(1/v)%*%datos2%*%diag(1/v)
datos2 = read.table("hipertension.txt", header=T, sep=" ", dec=".")
head(datos2)
dim(datos2)
v
# Tenemos que corregir también cov(datos) para que en la diagonal tenga las varianzas y no las
# cuasivarianzas.
datos2 = cov(datos)
datos2
diag(datos2) <- apply(datos, 2, var) * (n-1)/n; datos2
diag(1/v)%*%datos2%*%diag(1/v)
dim(datos2)
datos2 = read.table("hipertension.txt", header=T, sep=" ", dec=".")
head(datos2)
dim(datos2)
# Tenemos que corregir también cov(datos) para que en la diagonal tenga las varianzas y no las
# cuasivarianzas.
datos.corregidos = cov(datos)
# Tenemos que corregir también cov(datos) para que en la diagonal tenga las varianzas y no las
# cuasivarianzas.
datos.corregidos = cov(datos)
diag(datos.corregidos) <- apply(datos, 2, var) * (n-1)/n; datos.corregidos
diag(1/v)%*%datos.corregidos%*%diag(1/v)
datos2 = read.table("hipertension.txt", header=T, sep=" ", dec=".")
head(datos2)
dim(datos2)
#***************** Vector de medias
colMeans(datos2)
#***************** Diagramas de dispersión
plot(datos$edad, datos$PAM, pch=19)
#***************** Diagramas de dispersión
plot(datos2$edad, datos2$PAM, pch=19)
# Figura apuntes
par(mfrow = c(2,2))
plot(datos2)
#***************** Vector de medias
med = colMeans(datos2)
# Figura apuntes
par(mfrow = c(2,2))   # 2 filas, 2 columnas. Importante resetear después
plot(datos2)
points(med[1], med[2])
?points
plot(datos2)
points(med[1], med[2], col="blue", pch=16)
